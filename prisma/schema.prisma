// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    bankAccounts  BankAccount[]
    categories    Category[]
    payorPayees   PayorPayee[]    
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model BankAccount {
    id              Int             @id @default(autoincrement())
    name            String
    userId          String
    type            String
    initBalance     Decimal         @default(0) @db.Decimal(20, 2)
    currBalance     Decimal         @default(0) @db.Decimal(20, 2)
    createdDate     DateTime        @default(now())
    expireDate      DateTime?
    User            User            @relation(fields: [userId], references: [id])
    transactions    Transaction[]
}

model Transaction {
    id              Int              @id @default(autoincrement())
    accountId       Int
    amount          Decimal          @db.Decimal(20, 2)
    date            DateTime
    categoryId      Int?
    description     String?
    payorPayee      Int?
    isTransfer      Boolean          @default(false)
    createdDate     DateTime         @default(now())
    removedDate     DateTime?
    BankAccount     BankAccount      @relation(fields: [accountId], references: [id])
    Category        Category?        @relation(fields: [categoryId], references: [id])
    PayorPayee      PayorPayee?      @relation(fields: [payorPayee], references: [id])
}

model Category {
    id              Int             @id  @default(autoincrement())
    name            String          
    type            String
    custom          String?
    createdDate     DateTime        @default(now())
    removedDate     DateTime?
    transactions    Transaction[]
    User            User?           @relation(fields: [custom], references: [id])
    @@unique([name, type, custom])
}

model PayorPayee {
    id          Int             @id @default(autoincrement())
    thirdparty  String
    userId      String
    User        User            @relation(fields: [userId], references: [id])
    Transaction Transaction[]
    @@unique([thirdparty, userId])
}

model Budget {
    id              Int         @id @default(autoincrement())
    name            String      //name of budget
    userId          String  
    categories      String
    max             Int         //max spend allowed
    reset           String      //monthly, quarterly, annually, biannually (2x year)
    start           DateTime    @db.Date
    lastResetDate   DateTime    @db.Date
    expired         DateTime?   @db.Date    //date budget stopped or null if still active
    BudgetHx        BudgetHx[]  
}

model BudgetHx {
    id              Int         @id @default(autoincrement())
    budget          Int         
    max             Int         //max spend allowed for this period
    actual          Decimal     @db.Decimal(20, 2) //actual spend for that period
    start           DateTime    @db.Date //start date of period
    end             DateTime    @db.Date //end date of period
    Budget          Budget      @relation(fields: [budget], references: [id])
}